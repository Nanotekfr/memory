{"version":3,"sources":["Card.js","GuessCount.js","HallOfFame.js","HighScoreInput.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","_ref","card","feedback","index","onClick","react_default","a","createElement","className","concat","GuessCount","guesses","HallOfFame","entries","map","_ref2","id","date","player","key","prototype","PropTypes","arrayOf","shape","number","isRequired","string","HOF_KEY","HOF_MAX_SIZE","HighScoreInput","state","winner","handleWinnerUpdate","event","_this","setState","target","value","toUpperCase","persisteWinner","preventDefault","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","_ref3","push","splice","length","setItem","stringify","saveHOFEntry","props","onSubmit","this","autoComplete","onChange","type","Component","App","cards","generateCards","currentPair","hallOfFame","matchedCardIndices","displayHallOfFame","handleCardClick","handleNewPairClosedBy","result","candidates","shuffle","SIDE","pop","_this$state","indexMatched","includes","_this2","_this$state2","newPair","newGuesses","matched","Object","toConsumableArray","setTimeout","_this3","_this$state3","won","src_GuessCount_0","src_Card_0","getFeedbackForCard","src_HallOfFame_0","src_HighScoreInput_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bc365d6.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react'\r\n\r\nimport './Card.css'\r\n\r\nconst HIDDEN_SYMBOL = '❓'\r\n\r\nconst Card = ({ card, feedback, index, onClick }) => ( \r\n    <div className={`card ${feedback}`} onClick={() => onClick(index)}>\r\n        <span className=\"symbol\">\r\n            {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\r\n        </span>\r\n    </div>\r\n)\r\n\r\nCard.propTypes = {\r\n    card: PropTypes.string.isRequired,\r\n    feedback: PropTypes.oneOf([\r\n        'visible',\r\n        'hidden',\r\n        'justMatched',\r\n        'justMismatched',\r\n    ]).isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    onClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Card","import PropTypes from 'prop-types'\r\nimport React from 'react'\r\n\r\nimport './GuessCount.css'\r\n\r\nconst GuessCount = ({ guesses }) => <div className=\"guesses\">{guesses}</div>\r\n\r\nGuessCount.propTypes = {\r\n    guesses: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default GuessCount","import PropTypes from 'prop-types';\r\nimport React from 'react'\r\n\r\nimport './HallOfFame.css'\r\n\r\nconst HallOfFame = ({ entries }) => (\r\n    <table className=\"hallOfFame\">\r\n        <tbody>\r\n            {entries.map(({ id, date, guesses, player }) => (\r\n                <tr key={id}>\r\n                    <td className=\"date\">{date}</td>\r\n                    <td className=\"date\">{guesses}</td>\r\n                    <td className=\"date\">{player}</td>\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n    </table>\r\n)\r\n\r\nHallOfFame.prototype = {\r\n    entries: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            date: PropTypes.string.isRequired,\r\n            guesses: PropTypes.number.isRequired,\r\n            player: PropTypes.string.isRequired,\r\n        })\r\n    ).isRequired\r\n}\r\n\r\nexport default HallOfFame\r\n\r\n// == Internal helpers ==============================================\r\n\r\nexport const FAKE_HOF = [\r\n    { id: 3, guesses: 18, date: '10/10/2017', player: 'Jane' },\r\n    { id: 2, guesses: 23, date: '11/10/2017', player: 'Kevin' },\r\n    { id: 1, guesses: 31, date: '06/10/2017', player: 'Louisa' },\r\n    { id: 0, guesses: 48, date: '14/10/2017', player: 'Marc' },\r\n]\r\n\r\nconst HOF_KEY = '::Memory::HallofFame'\r\nconst HOF_MAX_SIZE = 10\r\n\r\nexport function saveHOFEntry(entry, onStored) {\r\n    entry.date = new Date().toLocaleDateString()\r\n    entry.id = Date.now()\r\n\r\n    const entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]')\r\n    const insertionPoint = entries.findIndex(\r\n    ({ guesses }) => guesses >= entry.guesses\r\n    )\r\n\r\n    if (insertionPoint === -1) {\r\n    entries.push(entry)\r\n    } else {\r\n    entries.splice(insertionPoint, 0, entry)\r\n    }\r\n    if (entries.length > HOF_MAX_SIZE) {\r\n    entries.splice(HOF_MAX_SIZE, entries.length)\r\n    }\r\n\r\n    localStorage.setItem(HOF_KEY, JSON.stringify(entries))\r\n    onStored(entries)\r\n    }","import PropTypes from 'prop-types'\r\nimport React, { Component } from 'react'\r\n\r\nimport './HighScoreInput.css'\r\n\r\nimport { saveHOFEntry } from './HallOfFame'\r\n\r\nclass HighScoreInput extends Component {\r\n    state = { winner: '' }\r\n\r\n    // Arrow fx for binding\r\n    handleWinnerUpdate = event => {\r\n        this.setState({ winner: event.target.value.toUpperCase() })\r\n    }\r\n\r\n    // Arrow fx for bindinf\r\n    persisteWinner = event => {\r\n        event.preventDefault()\r\n        const newEntry = { guesses: this.props.guesses, player: this.state.winner }\r\n        saveHOFEntry(newEntry, this.props.onStored)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"highScoreInput\" onSubmit={this.persisteWinner}>\r\n                <p>\r\n                    <label>\r\n                        Bravo ! Entre ton prénom :\r\n                        <input\r\n                            autoComplete=\"given-name\"\r\n                            onChange={this.handleWinnerUpdate}\r\n                            type=\"text\"\r\n                            value={this.state.winner}\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\">J’ai gagné !</button>\r\n                </p>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nHighScoreInput.propTypes = {\r\n    guesses: PropTypes.number.isRequired,\r\n    onStored: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default HighScoreInput","import React, { Component } from 'react'\r\nimport shuffle from 'lodash.shuffle'\r\n\r\nimport './App.css'\r\n\r\nimport Card from './Card'\r\nimport GuessCount from './GuessCount'\r\nimport HallOfFame, { FAKE_HOF } from './HallOfFame'\r\nimport HighScoreInput from './HighScoreInput';\r\n\r\n\r\nconst SIDE = 6\r\nexport const SYMBOLS = 'ABGCDEFGHIJKLMNOPQ'\r\nconst VISUAL_PAUSE_MSECS = 750\r\n\r\nclass App extends Component {\r\n  state = {\r\n    cards: this.generateCards(),\r\n    currentPair: [],\r\n    guesses: 0,\r\n    hallOfFame: null,\r\n    matchedCardIndices: [],\r\n  }\r\n\r\n  displayHallOfFame = hallOfFame => {\r\n    this.setState({ hallOfFame })\r\n  }\r\n\r\n  generateCards() {\r\n    const result = []\r\n    const size = SIDE * SIDE\r\n    const candidates = shuffle(SYMBOLS)\r\n    while (result.length < size) {\r\n      const card = candidates.pop()\r\n      result.push(card, card)\r\n    }\r\n    return shuffle(result)\r\n  }\r\n\r\n  getFeedbackForCard(index) {\r\n    const { currentPair, matchedCardIndices } = this.state\r\n    const indexMatched = matchedCardIndices.includes(index)\r\n\r\n      if (currentPair.length < 2) {\r\n        return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\r\n      }\r\n\r\n      if (currentPair.includes(index)) {\r\n        return indexMatched ? 'justMatched' : 'justMismatched'\r\n      }\r\n\r\n      return indexMatched ? 'visible' : 'hidden'\r\n  }\r\n\r\n  // Arrow fx for binding\r\n  handleCardClick = index => {\r\n    const { currentPair } = this.state\r\n\r\n    if (currentPair.length === 2) {\r\n      return\r\n    }\r\n\r\n    if (currentPair.length === 0) {\r\n      this.setState({ currentPair: [index] })\r\n      return\r\n    }\r\n\r\n    this.handleNewPairClosedBy(index)\r\n  }\r\n\r\n  handleNewPairClosedBy(index){\r\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\r\n\r\n    const newPair = [currentPair[0], index]\r\n    const newGuesses = guesses + 1\r\n    const matched = cards[newPair[0]] === cards[newPair[1]]\r\n    this.setState({ currentPair: newPair, guesses: newGuesses })\r\n    if (matched) {\r\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] })\r\n    }\r\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\r\n  }\r\n\r\n  render() {\r\n    const { cards, guesses, hallOfFame, matchedCardIndices } = this.state\r\n    const won = matchedCardIndices.length === 4 // cards.length\r\n    return (\r\n      <div className=\"memory\">\r\n        <GuessCount guesses={guesses} />\r\n          {cards.map((card, index) => (\r\n            <Card \r\n              card={card}\r\n              feedback={this.getFeedbackForCard(index)}\r\n              key={index}\r\n              index={index}\r\n              onClick={this.handleCardClick}/>\r\n          ))}\r\n        {won &&\r\n          (hallOfFame ? (\r\n            <HallOfFame entries={hallOfFame} />\r\n          ) : (\r\n            <HighScoreInput\r\n              guesses={guesses}\r\n              onStored={this.displayHallOfFame}\r\n          />\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}